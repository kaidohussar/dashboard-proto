{"version":3,"sources":["webpack:///./app/models/GraphsModel.ts","webpack:///./app/index.tsx","webpack:///./app/ui-components/Breadcrumbs/index.tsx","webpack:///./app/ui-components/ButtonWithIcon/index.tsx","webpack:///./app/ui-components/TitleWithIcon/index.tsx","webpack:///./app/components/PageInfo/index.tsx","webpack:///./app/ui-components/DropdownWithArrow/index.tsx","webpack:///./app/components/PageHeader/index.tsx","webpack:///./app/frames/FrameMain/index.tsx","webpack:///./app/ui-components/ContentLoading/index.tsx","webpack:///./app/components/Graph/GraphMain/GraphMainOverview/index.tsx","webpack:///./app/ui-components/MinGraphInfo/index.tsx","webpack:///./app/components/Graph/GraphMain/GraphMainSelection/index.tsx","webpack:///./app/components/Graph/GraphMain/GraphMainRange/index.tsx","webpack:///./app/components/Graph/GraphMain/index.tsx","webpack:///./app/components/Graph/index.tsx","webpack:///./app/containers/App/index.tsx","webpack:///./app/reducers/graphs.ts","webpack:///./app/reducers/index.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/store/index.ts","webpack:///./main.tsx","webpack:///./app/actions/graphs.ts","webpack:///./app/mock-data-generators/index.ts"],"names":["GraphType","SelectedRangeSides","App","module","path","component","breadcrumbItems","length","className","map","breadcrumbItem","i","key","onClick","title","ArrowForward","ButtonWithIcon","icon","id","hasPopup","Button","props","Launch","console","log","Settings","AccountTree","DropdownWithArrow","menuId","menuItems","anchorEl","setAnchorEl","ExpandMore","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","menuItem","MenuItem","onClickMethod","value","PageHeader","AccountCircle","children","CircularProgress","graphData","graphsData","state","graphs","selectedGraph","selectedRange","dispatch","rangeStart","START","rangeEnd","END","selectedArea","setSelectedArea","selectedAreaSide","setSelectedAreaSide","width","minHeight","data","onMouseDown","e","activeLabel","lengthToRangeStart","Math","abs","lengthToRangeEnd","findClosestAreaSide","onMouseMove","onMouseUp","type","Type","SET_SELECTED_GRAPH_RANGE","payload","dataKey","tick","x1","x2","fill","y1","y2","offset","stopColor","stopOpacity","stroke","fillOpacity","unit","isSelected","activeValue","height","pv","dot","strokeWidth","graphsState","currentGraphs","Object","keys","graphItem","item","averageResponseDelayData","toString","AccessTime","undefined","FormatSize","averagePayloadSize","PanoramaHorizontal","deadLetterQueue","Note","getItemData","Cog","x","viewBox","y","xmlns","d","updateActiveValue","graphsDataFromStore","startDate","endDate","referencePoint","setReferencePoint","isDragging","setIsDragging","filteredGraphData","filter","date","configChanges","activePayload","tickFormatter","label","format","GraphMain","setActiveValue","graphsActions","isFetching","endReached","fetchAllGraphs","graphsReducer","handleActions","FETCH_ALL_GRAPHS_REQUEST","action","FETCH_ALL_GRAPHS_SUCCESS","FETCH_ALL_GRAPHS_FAILURE","error","rootReducer","logger","store","next","initialState","middleware","render","history","document","getElementById","GraphsActions","threeDaysAgo","startOf","clone","subtract","valueOf","step","eventDate","push","random","min","max","floor","t","Promise","resolve","setTimeout","then","values","AVG_PAYLOAD_SIZE","lastQueueSizeData","LAST_QUEUE_SIZE","catch","useGraphsActions","actions"],"mappings":"yFAEA,IAAYA,EAeAC,E,oEAfZ,SAAYD,GACV,0CACA,oCACA,sCACA,wCAJF,CAAYA,MAAS,KAerB,SAAYC,GACV,gBACA,YAFF,CAAYA,MAAkB,M,kCCjB9B,4FAKaC,EAAM,cAAIC,EAAJ,EAAY,WAAM,OACnC,kBAAC,IAAM,KACL,kBAAC,IAAK,CAACC,KAAK,IAAIC,UAAW,Y,sICQlB,EAAc,SAAC,G,IAAEC,EAAA,EAAAA,gBAE1B,OAAKA,EAAgBC,OAGjB,yBAAKC,UAAU,uBACVF,EAAgBG,KAAI,SAACC,EAAgBC,GAAM,OACxC,4BAAQC,IAAKD,EAAGE,QAASH,EAAeG,QAASL,UAAU,oBACtDE,EAAeI,MACfH,IAAOL,EAAgBC,OAAS,GAC7B,kBAACQ,EAAA,EAAY,WARK,M,SCH7BC,EAAiB,SAAC,G,IAAEF,EAAA,EAAAA,MAAOG,EAAA,EAAAA,KAAMC,EAAA,EAAAA,GAAIC,EAAA,EAAAA,SAAUN,EAAA,EAAAA,QAASL,EAAA,EAAAA,UACjE,OACI,kBAACY,EAAA,EAAM,CAACZ,UAAWA,EAAS,gBAAiBU,EAAE,kBAAmBC,EAAUN,QAASA,GAChFC,EACAG,I,2BCRA,G,OAAgB,SAAC,G,IAAEH,EAAA,EAAAA,MAAOG,EAAA,EAAAA,KACnC,OACI,yBAAKT,UAAU,mBACVS,GACG,yBAAKT,UAAU,wBACVS,GAGT,4BAAKH,MCNJ,EAAW,SAACO,GACrB,OACI,yBAAKb,UAAU,aACX,yBAAKA,UAAU,mBACX,kBAAC,EAAW,CACRF,gBAAiB,CACb,CAAEQ,MAAO,oBACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,0BAGjB,yBAAKN,UAAU,yBACX,kBAACQ,EAAc,CACXR,UAAU,6BACVM,MAAM,cACNG,KAAM,kBAACK,EAAA,EAAM,MACbT,QAAS,WAAM,OAAAU,QAAQC,IAAI,YAE/B,kBAACR,EAAc,CACXR,UAAU,6BACVM,MAAM,gBACNG,KAAM,kBAACQ,EAAA,EAAQ,MACfZ,QAAS,WAAM,OAAAU,QAAQC,IAAI,cAIvC,yBAAKhB,UAAU,mBACX,kBAAC,EAAa,CACVM,MAAM,mCACNG,KAAO,kBAACS,EAAA,EAAW,W,oCCvB1BC,EAAoB,SAAC,G,IAAEC,EAAA,EAAAA,OAAQd,EAAA,EAAAA,MAAOe,EAAA,EAAAA,UACzC,qBAACC,EAAA,KAAUC,EAAA,KAWjB,OACI,oCACI,kBAACf,EAAc,CACXF,MAAOA,EACPG,KAAO,kBAACe,EAAA,EAAU,MAClBnB,QAdQ,SAACoB,GACjBF,EAAYE,EAAMC,gBAcVf,UAAQ,EACRD,GAAIU,MAELC,EAAUtB,QACT,kBAAC4B,EAAA,EAAI,CACDjB,GAAIU,EACJE,SAAUA,EACVM,aAAW,EACXC,KAAMC,QAAQR,GACdS,QArBI,SAACN,GAA8BF,EAAY,QAuB9CF,EAAUpB,KAAI,SAAC+B,EAAU7B,GAAM,OAC5B,kBAAC8B,EAAA,EAAQ,CACL7B,IAAKD,EACLE,QAAS,WAAM,OAzBV6B,EAyB8BF,EAAS3B,QAxBhEkB,EAAY,WACZW,IAFwB,IAACA,GA0BLC,MAAOH,EAAS1B,OAEf0B,EAAS1B,a,SC1CzB8B,EAAa,SAACvB,GACvB,OACI,gCACI,yBAAKb,UAAU,uBACX,kBAACmB,EAAiB,CACdC,OAAO,cACPd,MAAM,WACNe,UAAW,CACP,CACIf,MAAO,WACPD,QAAS,WAAM,OAAAU,QAAQC,IAAI,mBAE/B,CACIV,MAAO,WACPD,QAAS,WAAM,OAAAU,QAAQC,IAAI,sBAIvC,kBAACJ,EAAA,EAAM,CAACZ,UAAU,4BACd,kBAACqC,EAAA,EAAa,UCtBrB,G,OAAY,SAACxB,GACtB,OACI,yBAAKb,UAAU,cACVa,EAAMyB,Y,2CCFN,EAAiB,WAC1B,OACI,yBAAKtC,UAAU,mBACX,kBAACuC,EAAA,EAAgB,Q,wOCEhB,EAAoB,SAAC,G,MAAEC,EAAA,EAAAA,UAC1BC,EAAa,aAAY,SAACC,GAAqB,OAAAA,EAAMC,UAC3D,IAAKF,EAAWE,SAAWF,EAAWG,gBAAkBH,EAAWI,cAC/D,OAAO,KAEX,IAAMC,EAAW,cAEXC,EAAaN,EAAWI,cAAcG,MACtCC,EAAWR,EAAWI,cAAcK,IAEpC,6B,8BAACC,EAAA,KAAcC,EAAA,KAKf,2BAACC,EAAA,KAAkBC,EAAA,KASzB,OACI,yBAAKtD,UAAU,uBACX,kBAAC,IAAmB,CAACuD,MAAM,MAAMC,UAAW,KACxC,kBAAC,IAAS,CACNC,KAAMjB,EAAUiB,KAChBC,YAAc,SAACC,GAAM,OAZT,SAACC,GACzB,GAAKT,EAAL,CACA,IAAMU,EAAqBC,KAAKC,IAAIZ,EAAa,IAAmBH,OAASY,GACvEI,EAAmBF,KAAKC,IAAIZ,EAAa,IAAmBD,KAAOU,GAEzEN,EADuBO,EAAqBG,EACP,IAAmBhB,MAAQ,IAAmBE,MAOlDe,CAAoBN,EAAEC,cAC3CM,YAAa,SAACP,G,MACNN,GACAD,EAAgB,EAAD,KACRD,KAAY,MACdE,GAAmBM,EAAEC,YAAW,MAI7CO,UAAc,W,MACL1B,EAAWG,gBAChBU,EAAoB,MACpBR,EAAS,CACLsB,KAAM,IAAcC,KAAKC,yBACzBC,QAAS,CAAE3B,cAAeH,EAAWG,cAAeC,eAAa,KAC7D,EAAC,IAAmBG,OAAQG,EAAa,IAAmBH,OAC5D,EAAC,IAAmBE,KAAMC,EAAa,IAAmBD,K,SAKtE,kBAAC,IAAK,CAACsB,QAAQ,OAAOjB,MAAO,EAAGkB,MAAM,IACtC,kBAAC,IAAK,CAACD,QAAQ,QAAQjB,MAAO,EAAGkB,MAAM,IACvC,kBAAC,IAAa,CAACC,GAAIvB,EAAa,IAAmBH,OAAQ2B,GAAIxB,EAAa,IAAmBD,KAAM0B,KAAK,2BAC1G,8BACI,oCAAgBlE,GAAG,UAAUgE,GAAG,IAAIG,GAAG,IAAIF,GAAG,IAAIG,GAAG,KACjD,0BAAMC,OAAO,MAAMC,UAAU,2BAA2BC,YAAa,KACrE,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAG5D,kBAAC,IAAI,CAACb,KAAK,WAAWI,QAAQ,QAAQU,OAAO,2BAA2BC,YAAa,EAAGP,KAAK,sBCrDpG,G,cAAe,SAAC,G,IAACtE,EAAA,EAAAA,MAAO6B,EAAA,EAAAA,MAAOiD,EAAA,EAAAA,KAAMC,EAAA,EAAAA,WAAY5E,EAAA,EAAAA,KAAM6E,EAAA,EAAAA,YAyBhE,OACI,yBAAKtF,UAAW,mBAAkBqF,EAAa,WAAa,KACxD,yBAAKrF,UAAU,yBACX,yBAAKA,UAAU,+BAA+BM,GAC9C,yBAAKN,UAAU,8BAA8BS,IAEjD,yBAAKT,UAAU,wBAAwB,IAAGqF,EAAaC,EAAcnD,IAAQiD,GAAc,MACzFC,GACE,kBAAC,IAAmB,CAAC9B,MAAM,OAAOgC,OAAQ,IACtC,kBAAC,IAAS,CAAC9B,KAjCd,CACT,CACI+B,GAAI,MAER,CACIA,GAAI,MAER,CACIA,GAAI,MAER,CACIA,GAAI,MAER,CACIA,GAAI,MAER,CACIA,GAAI,MAER,CACIA,GAAI,QAcQ,kBAAC,IAAI,CAACpB,KAAK,WAAWqB,KAAK,EAAOjB,QAAQ,KAAKU,OAAO,UAAUQ,YAAa,S,mPCzCxF,EAAqB,SAAC,G,IAAEJ,EAAA,EAAAA,YAC3BK,EAAc,aAAY,SAACjD,GAAqB,OAAAA,EAAMC,UAE5D,IAAKgD,EAAYhD,OACb,OAAO,KAGX,IAwCMiD,EAAgBC,OAAOC,KAAKH,EAAYhD,QAE9C,OACI,yBAAK3C,UAAU,wBACV4F,EAAc3F,KAAI,SAAC8F,EAAW5F,GAC3B,IAAMsD,EAAO,mBAAQ,WAAM,OA7CnB,SAACuC,GACjB,GAAKL,EAAYhD,OACjB,OAAQqD,GACJ,IAAK,2BACD,MAAO,CACH1F,MAAO,sBACP6B,MAAOwD,EAAYhD,OAAOsD,yBAAyBxC,KAAK,GAAGtB,MAAM+D,WACjEd,KAAMO,EAAYhD,OAAOsD,yBAAyBxC,KAAK,GAAG2B,KAC1DC,YAAY,EACZ5E,KAAM,kBAAC0F,EAAA,EAAU,OAEzB,IAAK,oBACD,MAAO,CACH7F,MAAO,kBACP6B,MAAOwD,EAAYhD,OAAOsD,yBAAyBxC,KAAK,GAAGtB,MAAM+D,WACjEd,UAAMgB,EACNf,YAAY,EACZ5E,KAAM,kBAAC4F,EAAA,EAAU,OAEzB,IAAK,qBACD,MAAO,CACH/F,MAAO,oBACP6B,MAAOwD,EAAYhD,OAAO2D,mBAAmB7C,KAAK,GAAGtB,MAAM+D,WAC3Dd,KAAMO,EAAYhD,OAAOsD,yBAAyBxC,KAAK,GAAG2B,KAC1DC,YAAY,EACZ5E,KAAM,kBAAC8F,EAAA,EAAkB,OAEjC,IAAK,kBACD,MAAO,CACHjG,MAAO,oBACP6B,MAAOwD,EAAYhD,OAAO6D,gBAAgB/C,KAAK,GAAGtB,MAAM+D,WACxDd,KAAMO,EAAYhD,OAAO6D,gBAAgB/C,KAAK,GAAG2B,KACjDC,YAAY,EACZ5E,KAAM,kBAACgG,EAAA,EAAI,OAEnB,QACI,QAS2BC,CAAYX,KAAY,CAACH,IAEpD,OAAOnC,GACH,kBAAC,EAAY,GAACrD,IAAKD,GAAOsD,EAAI,CAAE6B,YAAa7B,EAAK4B,WAAaC,EAAc,W,0BC/C3FqB,EAAM,SAAC9F,GACT,OACI,mCAAeb,UAAU,oBAAoB4G,EAAG/F,EAAMgG,QAAQD,EAAI,GAAIE,EAAG,GACrE,yBAAK9G,UAAU,6BACX,yBAAKuD,MAAM,KAAKgC,OAAO,KAAKX,KAAK,wBAAwBgC,EAAG,KAAME,EAAG,GAAID,QAAQ,gBAAgBE,MAAM,8BAA6B,0BAAMC,EAAE,uvBAM/I,EAAiB,SAAC,G,QAAExE,EAAA,EAAAA,UAAWyE,EAAA,EAAAA,kBAClCC,EAAsB,aAAY,SAACxE,GAAqB,OAAAA,EAAMC,UAC9DwE,EAA6C,QAApC,EAAGD,EAAoBrE,qBAAa,eAAEG,MAC/CoE,EAA2C,QAApC,EAAGF,EAAoBrE,qBAAa,eAAEK,IAEnD,KAAKgE,EAAoBvE,QAAWuE,EAAoBtE,eAAkBuE,GAAcC,GACpF,OAAO,KAEL,iCAACC,EAAA,KAAgBC,EAAA,KACjB,yBAACC,EAAA,KAAYC,EAAA,KAGbC,EAAoB,mBAAQ,WAC9B,OAAOjF,EAAUiB,KAAKiE,QAAO,SAACjE,GAAS,OAAEA,EAAKkE,KAAOR,GAAe1D,EAAKkE,KAAOP,OACjF,CAACF,EAAoBrE,gBAElB+E,EAAgB,mBAAQ,WAC1B,OAAOpF,EAAUiB,KAAKiE,QAAO,SAACjE,GAAS,MAAc,kBAAdA,EAAKW,UAC7C,CAAC8C,EAAoBrE,gBAExB,qBAAU,WACNoE,EAAkBQ,EAAkBA,EAAkB1H,OAAS,GAAGoC,SACnE,CAAC+E,EAAoBtE,cAAesE,EAAoBtE,gBAS3D,OACI,yBAAK5C,UAAU,oBACX,kBAAC,IAAmB,CAACuD,MAAM,OAAOgC,OAAQ,KACtC,kBAAC,IAAS,CACN9B,KAAMgE,EACNvD,YAAc,SAACP,GAAM,OAAAA,GAAKA,EAAEC,YAZxB,SAACD,GACjB2D,EAAkB3D,EAAEC,aAChB2D,GACAN,EAAkBtD,EAAEkE,cAAc,GAAG1F,OASa+B,CAAYP,GAAK,MAC3DD,YAAc,WAAM,OAAA8D,GAAc,IAClCrD,UAAW,WACPmD,OAAkBlB,GAClBoB,GAAc,KAGlB,kBAAC,IAAK,CAAChD,QAAQ,OAAOsD,cAAe,SAACC,GAAU,WAAMA,GAAOC,OAAO,YACpE,kBAAC,IAAK,CAACxD,QAAQ,UACf,kBAAC,IAAI,CAACA,QAAQ,SAASU,OAAO,UAAUN,KAAK,QAC5CgD,EAAc3H,KAAI,SAACwD,EAAMtD,GAAM,yBAAC,IAAa,CAACC,IAAKD,EAAGyG,EAAGnD,EAAKkE,KAAMzC,OAAO,wBAAwB6C,MAAOpB,OAC1GY,GAAc,kBAAC,IAAa,CAACX,EAAGS,EAAgBnC,OAAO,UACxD,8BACI,oCAAgBxE,GAAG,UAAUgE,GAAG,IAAIG,GAAG,IAAIF,GAAG,IAAIG,GAAG,KACjD,0BAAMC,OAAO,MAAMC,UAAU,yBAAyBC,YAAa,KACnE,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAG5D,kBAAC,IAAI,CAACb,KAAK,WAAWI,QAAQ,QAAQU,OAAO,yBAAyBQ,YAAa,EAAGP,YAAa,EAAGP,KAAK,sBCzElHqD,EAAY,SAAC,G,IAAEzF,EAAA,EAAAA,UAAWI,EAAA,EAAAA,cAC7B,yBAAC0C,EAAA,KAAa4C,EAAA,KAEpB,OAAK1F,GAAcI,EAKf,yBAAK5C,UAAU,cACX,kBAAC,EAAkB,CAACsF,YAAaA,IACjC,kBAAC,EAAiB,CAAC9C,UAAWA,EAAUI,KACxC,kBAAC,EAAc,CACXqE,kBAAmB,SAAC3B,GAAgB,OAAA4C,EAAe5C,EAAcA,EAAYY,WAAa,KAC1F1D,UAAWA,EAAUI,MATtB,MCJF,EAAQ,SAAC,GAElB,IAAME,EAAW,cACXqF,EAAgB,YAAiBrF,GACjC6C,EAAc,aAAY,SAACjD,GAAqB,OAAAA,EAAMC,UAS5D,OAPA,qBAAU,WACDgD,EAAYyC,YAAezC,EAAY0C,YACxCvF,EAASqF,EAAcG,oBAE5B,CAAC3C,EAAY0C,WAAYvF,IAIxB,yBAAK9C,UAAU,kBACT2F,EAAYyC,aAAezC,EAAY0C,WACrC,kBAAC,EAAc,MACf1C,EAAYhD,QACZ,kBAACsF,EAAS,CAACrF,cAAe+C,EAAY/C,cAAeJ,UAAWmD,EAAYhD,WCtB/EjD,EAAM,SAACmB,GAChB,OACI,oCACI,kBAACuB,EAAU,MACX,kBAAC,EAAS,KACN,kBAAC,EAAQ,MACT,kBAAC,EAAK,U,wlBCDTmG,EAAgB,OAAAC,EAAA,KAAa,MAErC,IAAcnE,KAAKoE,0BAA2B,SAAC/F,EAAOgG,GACrD,OAAO,EAAP,KACOhG,GAAK,CACR0F,YAAY,KAGlB,EAAC,IAAc/D,KAAKsE,0BAA2B,SAACjG,EAAOgG,GACrD,OAAO,EAAP,KACOhG,GAAK,CACRC,OAAQ+F,EAAOnE,QAAQ5B,OACvBC,cAAe8F,EAAOnE,QAAQ3B,cAC9BC,cAAe6F,EAAOnE,QAAQ1B,cAC9BuF,YAAY,EACZC,YAAY,KAGlB,EAAC,IAAchE,KAAKuE,0BAA2B,SAAClG,EAAOgG,GACrD,OAAO,EAAP,KACOhG,GAAK,CACR0F,YAAY,EACZC,YAAY,EACZQ,MAAOH,EAAOnE,QAAQsE,SAG5B,EAAC,IAAcxE,KAAKC,0BAA2B,SAAC5B,EAAOgG,GACrD,OAAKhG,EAAME,eAAkBF,EAAMC,OAC5B,EAAP,KACKD,GAAK,CACRG,cAAe6F,EAAOnE,QAAQ1B,gBAHoBH,G,GApCd,CACxCmG,MAAO,GACPT,YAAY,EACZC,YAAY,EACZ1F,OAAQ,KACRC,cAAe,KACfC,cAAe,OCLNiG,EAAc,0BAA2B,CACpDnG,OAAQ4F,ICLGQ,EAAqB,SAACC,GAAU,gBAACC,GAAS,gBAACP,GAItD,OAAOO,EAAKP,M,aCDiBQ,EACzBC,E,iBCIA,G,OAAU,eACV,GDLAA,EAAa,0BAAgB,IAAOJ,GAM1B,sBAAYD,EAAoBI,EAAqBC,ICCrE,IAASC,OACP,kBAAC,IAAQ,CAACJ,MAAO,GACf,kBAAC,IAAM,CAACK,QAAS,GACf,kBAAC,IAAG,QAGRC,SAASC,eAAe,U,wGCPT,E,ugGAAjB,SAAiBC,IACf,SAAYnF,GACV,sDACA,sDACA,sDAEA,sDALF,CAAY,EAAAA,OAAA,EAAAA,KAAI,KA2BH,EAAAiE,eAAiB,WAC5B,OAAO,SAAexF,G,0EACpBA,EArBK,CACLsB,KAAMoF,EAAcnF,KAAKoE,2BCdiB,mC,uCAI5C,IAHMhF,EAAqB,GACrBgG,EAAe,MAAQC,QAAQ,OAAOC,QAAQC,SAAS,EAAG,OAAOC,UAE9DC,EAAO,EAAGA,EAAO,IAAKA,IACrBC,EAAYN,EAAuB,KAAPK,EAClCrG,EAAKuG,KACD,CACIrC,KAAMoC,EACN3F,KAAMN,KAAKmG,SAAW,IAAM,gBAAkB,UAC9ClC,MAAO,IAAMgC,GAAW/B,OAAO,SAC/B7F,OAfe+H,EAec,EAfDC,EAeI,KAdrCrG,KAAKsG,MAAMtG,KAAKmG,UAAYE,EAAMD,EAAM,GAAKA,MAD1B,IAACA,EAAaC,EAD7BE,EAoBX,MAAO,CAAP,GApBWA,EAoBE,IApBY,IAAIC,SAAQ,SAAAC,GAAW,OAAAC,WAAWD,EAASF,OAoBjDI,MAAK,WACpB,OAAOhH,YDoBqBgH,MAAK,SAACC,G,MAlBT/H,EAAiBC,EAA8BC,EAmBlEE,EAAa,MAAQ2G,QAAQ,OAAOE,SAAS,EAAG,OAAOC,UACvD5G,EAAWyH,EAAOA,EAAO3K,OAAQ,GAAG4H,KAE1C7E,GAtByBH,EAsBM,CAC7BsD,yBAA0B,CACxBxC,KAAM,CAAC,CACLkE,KAAM,EACNvD,KAAM,UACN2D,MAAO,GACP5F,MAAO,GACPiD,KAAM,OAERhB,KAAM,IAAUuG,kBAElBC,kBAAmB,CACjBnH,KAAMiH,EACNtG,KAAM,IAAUyG,iBAElBvE,mBAAoB,CAClB7C,KAAM,CAAC,CACLkE,KAAM,EACNvD,KAAM,UACN2D,MAAO,GACP5F,MAAO,KACPiD,KAAM,OAERhB,KAAM,IAAUuG,kBAElBnE,gBAAiB,CACf/C,KAAM,CAAC,CACLkE,KAAM,EACNvD,KAAM,UACN2D,MAAO,GACP5F,MAAO,IAETiC,KAAM,IAAUuG,mBAtDsB/H,EAyDtC,qBAAmB,MAEpB,IAAmBI,OAAQD,EAC5B,EAAC,IAAmBG,KAAMD,EA5D4CJ,E,EACrE,CACLuB,KAAMoF,EAAcnF,KAAKsE,yBACzBpE,QAAS,CAAE5B,OAAM,EAAEC,cAAa,EAAEC,cAAa,SA4D5CiI,OAAM,WAAM,OAxDYjC,EAwDU,QAvDhC,CACLzE,KAAMoF,EAAcnF,KAAKuE,yBACzBrE,QAAS,CAAEsE,MAAK,IAHU,IAACA,K,YArBjC,CAAiB,MAAa,KAoFvB,IAAMkC,EAAmB,SAACjI,GACvB,EAAAuB,KAAA,IAAM,gBACd,OAAO,mBAAQ,WAAM,OAAA2G,IAAS,CAAClI,O","file":"app.159b419d7b58e5bae86f.js","sourcesContent":["/** Graphs item model definitions **/\n\nexport enum GraphType {\n  AVG_RESPONSE_DELAY = 'AVG_RESPONSE_DELAY',\n  LAST_QUEUE_SIZE = 'LAST_QUEUE_SIZE',\n  AVG_PAYLOAD_SIZE = 'AVG_PAYLOAD_SIZE',\n  DEAD_LETTER_QUEUE = 'DEAD_LETTER_QUEUE',\n}\n\nexport interface IGraphDataMain {\n  type: GraphType,\n  data: IGraphData[];\n}\n\nexport type GraphDataItemType = 'default' | 'config-change';\nexport type GraphDataItemUnit = 'ms' | 'kb';\n\nexport enum SelectedRangeSides {\n  START = 'START',\n  END = 'END',\n}\n\nexport interface IGraphData {\n  date: number;\n  type: GraphDataItemType,\n  label: string;\n  value: number;\n  unit?: GraphDataItemUnit;\n}\n\nexport interface IGraphs {\n  averageResponseDelayData: IGraphDataMain;\n  lastQueueSizeData: IGraphDataMain;\n  averagePayloadSize: IGraphDataMain;\n  deadLetterQueue: IGraphDataMain;\n}\n\nexport interface GraphsModel {\n  isFetching: boolean;\n  endReached: boolean;\n  error: '';\n  selectedGraph: keyof IGraphs | null;\n  selectedRange: { [key in SelectedRangeSides]: number } | null\n  graphs: IGraphs | null;\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { App as GraphApp } from 'app/containers/App';\nimport { hot } from 'react-hot-loader';\n\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={GraphApp} />\n  </Switch>\n));\n","import React from 'react';\nimport './index.scss';\nimport { ArrowForward } from '@material-ui/icons';\n\ninterface BreadcrumbItem {\n    title: string;\n    onClick?: () => void;\n}\n\nexport namespace Breadcrumbs {\n    export interface Props {\n        breadcrumbItems: BreadcrumbItem[];\n    }\n}\n\nexport const Breadcrumbs = ({ breadcrumbItems }: Breadcrumbs.Props): JSX.Element | null => {\n\n    if (!breadcrumbItems.length) { return null; }\n\n    return (\n        <div className=\"breadcrumbs-wrapper\">\n            {breadcrumbItems.map((breadcrumbItem, i) => (\n                <button key={i} onClick={breadcrumbItem.onClick} className=\"breadcrumbs-item\">\n                    {breadcrumbItem.title}\n                    {i !== (breadcrumbItems.length - 1) && (\n                        <ArrowForward />\n                    )}\n                </button>\n            ))}\n        </div>\n    )\n};\n","import React, { BaseSyntheticEvent } from 'react';\nimport { Button } from '@material-ui/core';\n\nexport namespace ButtonWithIcon {\n    export interface Props {\n        title: string;\n        icon: React.ReactElement;\n        onClick: (event: BaseSyntheticEvent<MouseEvent, EventTarget & HTMLButtonElement, EventTarget>) => void;\n        id?: string;\n        hasPopup?: boolean;\n        className?: string;\n    }\n}\n\nexport const ButtonWithIcon = ({ title, icon, id, hasPopup, onClick, className }: ButtonWithIcon.Props): JSX.Element => {\n    return (\n        <Button className={className} aria-controls={id} aria-haspopup={!!hasPopup} onClick={onClick}>\n            {title}\n            {icon}\n        </Button>\n    );\n};\n","import React from 'react';\nimport './index.scss';\n\nexport namespace TitleWithIcon {\n    export interface Props {\n        title: string;\n        icon: JSX.Element;\n    }\n}\n\nexport const TitleWithIcon = ({ title, icon }: TitleWithIcon.Props): JSX.Element => {\n    return (\n        <div className=\"title-with-icon\">\n            {icon && (\n                <div className=\"title-with-icon-icon\">\n                    {icon}\n                </div>\n            )}\n            <h2>{title}</h2>\n        </div>\n    );\n};\n","import React from 'react';\nimport './index.scss';\nimport { Breadcrumbs } from 'app/ui-components/Breadcrumbs';\nimport { ButtonWithIcon } from 'app/ui-components/ButtonWithIcon';\nimport { AccountTree, Launch, Settings } from '@material-ui/icons';\nimport { TitleWithIcon } from 'app/ui-components/TitleWithIcon';\n\nexport namespace PageInfo {\n  export interface Props {\n  }\n}\n\nexport const PageInfo = (props: PageInfo.Props): JSX.Element => {\n    return (\n        <div className=\"page-info\">\n            <div className=\"page-info-upper\">\n                <Breadcrumbs\n                    breadcrumbItems={[\n                        { title: 'Breadcrumbs root' },\n                        { title: 'Breadcrumbs item #2' },\n                        { title: 'Breadcrumbs item #1' },\n                    ]}\n                />\n                <div className=\"page-info-upper-items\">\n                    <ButtonWithIcon\n                        className=\"page-info-upper-items-item\"\n                        title=\"AWS Console\"\n                        icon={<Launch />}\n                        onClick={() => console.log('click')}\n                    />\n                    <ButtonWithIcon\n                        className=\"page-info-upper-items-item\"\n                        title=\"Configuration\"\n                        icon={<Settings />}\n                        onClick={() => console.log('click')}\n                    />\n                </div>\n            </div>\n            <div className=\"page-info-lower\">\n                <TitleWithIcon\n                    title=\"alerting-check-policy-conditions\"\n                    icon={(<AccountTree />)}\n                />\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport { ExpandMore } from '@material-ui/icons';\nimport { ButtonWithIcon } from 'app/ui-components/ButtonWithIcon';\n\ninterface IMenuItem {\n    title: string;\n    onClick: () => void;\n}\n\nexport namespace DropdownWithArrow {\n    export interface Props {\n        menuId: string;\n        title: string;\n        menuItems: IMenuItem[];\n    }\n}\n\nexport const DropdownWithArrow = ({ menuId, title, menuItems }: DropdownWithArrow.Props): JSX.Element => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n    const handleClick = (event: React.BaseSyntheticEvent<MouseEvent, EventTarget & HTMLButtonElement, EventTarget>) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = (event: React.MouseEvent) => { setAnchorEl(null) };\n    const handleMenuItemClick = (onClickMethod: IMenuItem['onClick']) => {\n        setAnchorEl(null);\n        onClickMethod();\n    };\n\n    return (\n        <>\n            <ButtonWithIcon\n                title={title}\n                icon={(<ExpandMore />)}\n                onClick={handleClick}\n                hasPopup\n                id={menuId}\n            />\n            {!!menuItems.length && (\n                <Menu\n                    id={menuId}\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    {menuItems.map((menuItem, i) => (\n                        <MenuItem\n                            key={i}\n                            onClick={() => handleMenuItemClick(menuItem.onClick)}\n                            value={menuItem.title}\n                        >\n                            {menuItem.title}\n                        </MenuItem>\n                    ))}\n                </Menu>\n            )}\n        </>\n    );\n};\n","import React from 'react';\nimport './page-header.scss';\nimport { DropdownWithArrow } from 'app/ui-components/DropdownWithArrow';\nimport { AccountCircle } from '@material-ui/icons';\nimport { Button } from '@material-ui/core';\n\nexport namespace PageHeader {\n    export interface Props {\n    }\n}\n\nexport const PageHeader = (props: PageHeader.Props): JSX.Element => {\n    return (\n        <header>\n            <div className=\"page-header-actions\">\n                <DropdownWithArrow\n                    menuId=\"header-menu\"\n                    title=\"Label #1\"\n                    menuItems={[\n                        {\n                            title: 'Label #2',\n                            onClick: () => console.log('click label 2'),\n                        },\n                        {\n                            title: 'Label #3',\n                            onClick: () => console.log('click label 3'),\n                        }\n                    ]}\n                />\n                <Button className=\"page-header-actions-user\">\n                    <AccountCircle />\n                </Button>\n            </div>\n        </header>\n    );\n};\n","import React, { PropsWithChildren } from 'react';\nimport './index.scss';\n\nexport namespace FrameMain {\n    export interface Props extends PropsWithChildren<any>{\n    }\n}\n\nexport const FrameMain = (props: FrameMain.Props): JSX.Element => {\n    return (\n        <div className=\"frame-main\">\n            {props.children}\n        </div>\n    );\n};\n","import React from 'react';\nimport './index.scss';\nimport { CircularProgress } from '@material-ui/core';\n\nexport namespace ContentLoading {\n    export interface Props {\n    }\n}\n\nexport const ContentLoading = (): JSX.Element => {\n    return (\n        <div className=\"content-loading\">\n            <CircularProgress />\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport './index.scss';\nimport { IGraphDataMain, SelectedRangeSides } from 'app/models';\nimport { Area, AreaChart, ReferenceArea, ResponsiveContainer, XAxis, YAxis } from 'recharts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'app/reducers';\nimport { GraphsActions } from 'app/actions';\n\nexport namespace PageInfo {\n    export interface Props {\n        graphData: IGraphDataMain;\n    }\n}\n\nexport const GraphMainOverview = ({ graphData }: PageInfo.Props): JSX.Element | null => {\n    const graphsData = useSelector((state: RootState) => state.graphs);\n    if (!graphsData.graphs || !graphsData.selectedGraph || !graphsData.selectedRange) {\n        return null;\n    }\n    const dispatch = useDispatch();\n\n    const rangeStart = graphsData.selectedRange.START;\n    const rangeEnd = graphsData.selectedRange.END;\n\n    const [selectedArea, setSelectedArea] = useState({\n        [SelectedRangeSides.START]: rangeStart,\n        [SelectedRangeSides.END]: rangeEnd,\n    })\n\n    const [selectedAreaSide, setSelectedAreaSide] = useState<SelectedRangeSides | null>(null);\n\n    const findClosestAreaSide = (activeLabel: number) => {\n        if (!selectedArea) { return; }\n        const lengthToRangeStart = Math.abs(selectedArea[SelectedRangeSides.START] - activeLabel);\n        const lengthToRangeEnd = Math.abs(selectedArea[SelectedRangeSides.END] - activeLabel);\n        const isStartClosest = lengthToRangeStart < lengthToRangeEnd;\n        setSelectedAreaSide(isStartClosest ? SelectedRangeSides.START : SelectedRangeSides.END);\n    }\n    return (\n        <div className=\"graph-main-overview\">\n            <ResponsiveContainer width=\"99%\" minHeight={150}>\n                <AreaChart\n                    data={graphData.data}\n                    onMouseDown={ (e) => findClosestAreaSide(e.activeLabel) }\n                    onMouseMove={(e) => {\n                        if (selectedAreaSide) {\n                            setSelectedArea({\n                                ...selectedArea,\n                                [selectedAreaSide]: e.activeLabel\n                            })\n                        }\n                    }}\n                    onMouseUp = { () => {\n                        if (!graphsData.selectedGraph) { return; }\n                        setSelectedAreaSide(null);\n                        dispatch({\n                            type: GraphsActions.Type.SET_SELECTED_GRAPH_RANGE,\n                            payload: { selectedGraph: graphsData.selectedGraph, selectedRange: {\n                                [SelectedRangeSides.START]: selectedArea[SelectedRangeSides.START],\n                                [SelectedRangeSides.END]: selectedArea[SelectedRangeSides.END]\n                            }},\n                        })\n                    }}\n                >\n                    <XAxis dataKey=\"date\" width={0} tick={false} />\n                    <YAxis dataKey=\"value\" width={0} tick={false} />\n                    <ReferenceArea x1={selectedArea[SelectedRangeSides.START]} x2={selectedArea[SelectedRangeSides.END]} fill=\"rgba(75, 69, 198, 0.3)\" />\n                    <defs>\n                        <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"10%\" stopColor=\"rgba(186, 186, 186, 0.1)\" stopOpacity={0.8}/>\n                            <stop offset=\"90%\" stopColor=\"#f5f5f5\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <Area type=\"monotone\" dataKey=\"value\" stroke=\"rgba(186, 186, 186, 0.7)\" fillOpacity={1} fill=\"url(#colorPv)\" />\n                </AreaChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n","import React from 'react';\nimport './index.scss';\nimport {\n    LineChart, Line, ResponsiveContainer,\n} from 'recharts';\n\nexport interface IMinGraphInfo {\n    title: string;\n    value: string;\n    unit?: 'ms' | 'kb' | string;\n    isSelected: boolean;\n    icon: React.ReactElement;\n}\n\nexport namespace MinGraphInfo {\n    export interface Props extends IMinGraphInfo {\n        activeValue: string;\n    }\n}\n\nexport const MinGraphInfo = ({title, value, unit, isSelected, icon, activeValue}: MinGraphInfo.Props): JSX.Element | null => {\n    const data = [\n        {\n            pv: 1252\n        },\n        {\n            pv: 4672\n        },\n        {\n            pv: 2233\n        },\n        {\n            pv: 3578\n        },\n        {\n            pv: 4201\n        },\n        {\n            pv: 2231\n        },\n        {\n            pv: 5620\n        },\n    ];\n\n    return (\n        <div className={`min-graph-info ${isSelected ? 'selected' : ''}`}>\n            <div className=\"min-graph-info-header\">\n                <div className=\"min-graph-info-header-title\">{title}</div>\n                <div className=\"min-graph-info-header-icon\">{icon}</div>\n            </div>\n            <div className=\"min-graph-info-value\">{`${isSelected ? activeValue : value}${unit ? unit : ''}`}</div>\n            {!isSelected && (\n                <ResponsiveContainer width=\"100%\" height={70}>\n                    <LineChart data={data}>\n                        <Line type=\"monotone\" dot={false} dataKey=\"pv\" stroke=\"#8884d8\" strokeWidth={1} />\n                    </LineChart>\n                </ResponsiveContainer>\n            )}\n        </div>\n    )\n};\n","import React, { useMemo } from 'react';\nimport './index.scss';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'app/reducers';\nimport { IGraphs } from 'app/models';\nimport { IMinGraphInfo, MinGraphInfo } from 'app/ui-components/MinGraphInfo';\nimport { AccessTime, FormatSize, PanoramaHorizontal, Note } from '@material-ui/icons';\n\nexport namespace GraphMainSelection {\n    export interface Props {\n        activeValue: string;\n    }\n}\n\nexport const GraphMainSelection = ({ activeValue }: GraphMainSelection.Props) => {\n    const graphsState = useSelector((state: RootState) => state.graphs);\n\n    if (!graphsState.graphs) {\n        return null;\n    }\n\n    const getItemData = (item: keyof IGraphs): IMinGraphInfo | undefined => {\n        if (!graphsState.graphs) { return; }\n        switch (item) {\n            case 'averageResponseDelayData':\n                return {\n                    title: 'Avg. response delay',\n                    value: graphsState.graphs.averageResponseDelayData.data[0].value.toString(),\n                    unit: graphsState.graphs.averageResponseDelayData.data[0].unit,\n                    isSelected: false,\n                    icon: <AccessTime />,\n                };\n            case 'lastQueueSizeData':\n                return {\n                    title: 'Last queue size',\n                    value: graphsState.graphs.averageResponseDelayData.data[0].value.toString(),\n                    unit: undefined,\n                    isSelected: true,\n                    icon: <FormatSize />,\n                }\n            case 'averagePayloadSize':\n                return {\n                    title: 'Avg. payload size',\n                    value: graphsState.graphs.averagePayloadSize.data[0].value.toString(),\n                    unit: graphsState.graphs.averageResponseDelayData.data[0].unit,\n                    isSelected: false,\n                    icon: <PanoramaHorizontal />,\n                };\n            case 'deadLetterQueue':\n                return {\n                    title: 'Dead letter queue',\n                    value: graphsState.graphs.deadLetterQueue.data[0].value.toString(),\n                    unit: graphsState.graphs.deadLetterQueue.data[0].unit,\n                    isSelected: false,\n                    icon: <Note />,\n                };\n            default:\n                return;\n        }\n    }\n    \n    const currentGraphs = Object.keys(graphsState.graphs) as (keyof IGraphs)[] ;\n    \n    return (\n        <div className=\"graph-main-selection\">\n            {currentGraphs.map((graphItem, i) => {\n                const data = useMemo(() => getItemData(graphItem), [currentGraphs]);\n\n                return data && (\n                    <MinGraphInfo key={i} {...data} activeValue={data.isSelected ? activeValue : ''} />\n                )\n            })}\n        </div>\n    );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './index.scss';\nimport { IGraphDataMain } from 'app/models';\nimport {\n    Area,\n    AreaChart, Line,\n    ReferenceLine,\n    ResponsiveContainer,\n    XAxis,\n    YAxis,\n} from 'recharts';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'app/reducers';\nimport dayjs from 'dayjs';\n\nexport namespace PageInfo {\n    export interface Props {\n        graphData: IGraphDataMain;\n        updateActiveValue: (value: number) => void;\n    }\n}\n\nconst Cog = (props: any) => {\n    return (\n        <foreignObject className=\"config-change-cog\" x={props.viewBox.x - 20} y={0}>\n            <div className=\"config-change-cog-wrapper\">\n                <svg width=\"24\" height=\"24\" fill=\"rgba(75, 69, 198, .8)\" x={1325} y={20} viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1152 896q0-106-75-181t-181-75-181 75-75 181 75 181 181 75 181-75 75-181zm512-109v222q0 12-8 23t-20 13l-185 28q-19 54-39 91 35 50 107 138 10 12 10 25t-9 23q-27 37-99 108t-94 71q-12 0-26-9l-138-108q-44 23-91 38-16 136-29 186-7 28-36 28h-222q-14 0-24.5-8.5t-11.5-21.5l-28-184q-49-16-90-37l-141 107q-10 9-25 9-14 0-25-11-126-114-165-168-7-10-7-23 0-12 8-23 15-21 51-66.5t54-70.5q-27-50-41-99l-183-27q-13-2-21-12.5t-8-23.5v-222q0-12 8-23t19-13l186-28q14-46 39-92-40-57-107-138-10-12-10-24 0-10 9-23 26-36 98.5-107.5t94.5-71.5q13 0 26 10l138 107q44-23 91-38 16-136 29-186 7-28 36-28h222q14 0 24.5 8.5t11.5 21.5l28 184q49 16 90 37l142-107q9-9 24-9 13 0 25 10 129 119 165 170 7 8 7 22 0 12-8 23-15 21-51 66.5t-54 70.5q26 50 41 98l183 28q13 2 21 12.5t8 23.5z\"/></svg>\n            </div>\n        </foreignObject>\n    );\n};\n\nexport const GraphMainRange = ({ graphData, updateActiveValue }: PageInfo.Props): JSX.Element | null => {\n    const graphsDataFromStore = useSelector((state: RootState) => state.graphs);\n    const startDate = graphsDataFromStore.selectedRange?.START;\n    const endDate = graphsDataFromStore.selectedRange?.END;\n\n    if (!graphsDataFromStore.graphs || !graphsDataFromStore.selectedGraph || !startDate || !endDate) {\n        return null;\n    }\n    const [referencePoint, setReferencePoint] = useState(undefined);\n    const [isDragging, setIsDragging] = useState(false);\n\n\n    const filteredGraphData = useMemo(() => {\n        return graphData.data.filter((data) => ((data.date > startDate) && (data.date < endDate)))\n    }, [graphsDataFromStore.selectedRange])\n\n    const configChanges = useMemo(() => {\n        return graphData.data.filter((data) => data.type === 'config-change');\n    }, [graphsDataFromStore.selectedRange])\n\n    useEffect(() => {\n        updateActiveValue(filteredGraphData[filteredGraphData.length - 1].value);\n    }, [graphsDataFromStore.selectedGraph, graphsDataFromStore.selectedGraph])\n\n    const onMouseMove = (e: any) => {\n        setReferencePoint(e.activeLabel);\n        if (isDragging) {\n            updateActiveValue(e.activePayload[0].value);\n        }\n    }\n\n    return (\n        <div className=\"graph-main-range\">\n            <ResponsiveContainer width=\"100%\" height={400}>\n                <AreaChart\n                    data={filteredGraphData}\n                    onMouseMove={ (e) => e && e.activeLabel ? onMouseMove(e) : null }\n                    onMouseDown={ () => setIsDragging(true) }\n                    onMouseUp={() => {\n                        setReferencePoint(undefined)\n                        setIsDragging(false);\n                    }}\n                >\n                    <XAxis dataKey=\"date\" tickFormatter={(label) => dayjs(label).format('HH:mm')} />\n                    <YAxis dataKey=\"value\" />\n                    <Line dataKey=\"Page D\" stroke=\"#8884d8\" fill=\"red\"/>\n                    {configChanges.map((data, i) => <ReferenceLine key={i} x={data.date} stroke=\"rgba(75, 69, 198, .3)\" label={Cog} />)}\n                    {isDragging && <ReferenceLine x={referencePoint} stroke=\"black\"  />}\n                    <defs>\n                        <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"10%\" stopColor=\"rgba(75, 69, 198, 0.1)\" stopOpacity={0.8}/>\n                            <stop offset=\"90%\" stopColor=\"#f5f5f5\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <Area type=\"monotone\" dataKey=\"value\" stroke=\"rgba(75, 69, 198, 0.2)\" strokeWidth={2} fillOpacity={1} fill=\"url(#colorUv)\" />\n                </AreaChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { GraphMainOverview } from 'app/components/Graph/GraphMain/GraphMainOverview';\nimport { IGraphs } from 'app/models';\nimport { GraphMainSelection } from 'app/components/Graph/GraphMain/GraphMainSelection';\nimport { GraphMainRange } from 'app/components/Graph/GraphMain/GraphMainRange';\n\nexport namespace GraphMain {\n    export interface Props {\n        graphData: IGraphs | null;\n        selectedGraph: keyof IGraphs | null;\n    }\n}\n\nexport const GraphMain = ({ graphData, selectedGraph }: GraphMain.Props): JSX.Element | null => {\n    const [activeValue, setActiveValue] = useState('');\n\n    if (!graphData || !selectedGraph) {\n        return null;\n    }\n\n    return (\n        <div className=\"graph-main\">\n            <GraphMainSelection activeValue={activeValue} />\n            <GraphMainOverview graphData={graphData[selectedGraph]}/>\n            <GraphMainRange\n                updateActiveValue={(activeValue) => setActiveValue(activeValue ? activeValue.toString() : '')}\n                graphData={graphData[selectedGraph]}\n            />\n        </div>\n    );\n};\n","import React, { useEffect } from 'react';\nimport './index.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useGraphsActions } from 'app/actions';\nimport { RootState } from 'app/reducers';\nimport { ContentLoading } from 'app/ui-components/ContentLoading';\nimport { GraphMain } from 'app/components/Graph/GraphMain';\n\nexport namespace Graph {\n    export interface Props {\n    }\n}\n\nexport const Graph = ({}: Graph.Props): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const graphsActions = useGraphsActions(dispatch);\n    const graphsState = useSelector((state: RootState) => state.graphs);\n\n    useEffect(() => {\n        if (!graphsState.isFetching && !graphsState.endReached) {\n            dispatch(graphsActions.fetchAllGraphs())\n        }\n    }, [graphsState.endReached, dispatch])\n    // Fetch all graphs related to 'alerting-check-policy-conditions'\n\n    return (\n        <div className=\"graphs-wrapper\">\n            {(graphsState.isFetching || !graphsState.endReached) ? (\n                <ContentLoading />\n            ) : graphsState.graphs && (\n                <GraphMain selectedGraph={graphsState.selectedGraph} graphData={graphsState.graphs}/>\n            )}\n        </div>\n    );\n};\n","import React from 'react';\nimport { PageHeader, PageInfo } from 'app/components';\nimport { FrameMain } from 'app/frames/FrameMain';\nimport { Graph } from 'app/components/Graph';\n\nexport namespace App {\n  export interface Props {}\n}\n\nexport const App = (props: App.Props) => {\n    return (\n        <>\n            <PageHeader />\n            <FrameMain>\n                <PageInfo />\n                <Graph />\n                {/* graph */}\n                {/* additional data */}\n            </FrameMain>\n        </>\n    );\n};\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { GraphsActions } from 'app/actions/graphs';\nimport { GraphsModel } from 'app/models';\n\nconst initialState: RootState.GraphsState = {\n    error: '',\n    isFetching: false,\n    endReached: false,\n    graphs: null,\n    selectedGraph: null,\n    selectedRange: null,\n};\n\nexport const graphsReducer = handleActions<RootState.GraphsState, GraphsModel>(\n  {\n    [GraphsActions.Type.FETCH_ALL_GRAPHS_REQUEST]: (state, action) => {\n      return {\n          ...state,\n          isFetching: true,\n      }\n    },\n    [GraphsActions.Type.FETCH_ALL_GRAPHS_SUCCESS]: (state, action) => {\n      return {\n          ...state,\n          graphs: action.payload.graphs,\n          selectedGraph: action.payload.selectedGraph,\n          selectedRange: action.payload.selectedRange,\n          isFetching: false,\n          endReached: true,\n      }\n    },\n    [GraphsActions.Type.FETCH_ALL_GRAPHS_FAILURE]: (state, action) => {\n      return {\n          ...state,\n          isFetching: false,\n          endReached: true,\n          error: action.payload.error,\n      }\n    },\n    [GraphsActions.Type.SET_SELECTED_GRAPH_RANGE]: (state, action) => {\n      if (!state.selectedGraph || !state.graphs) { return state; }\n      return {\n        ...state,\n        selectedRange: action.payload.selectedRange,\n      }\n    },\n  },\n  initialState\n);\n","import { combineReducers } from 'redux';\nimport { RootState } from './state';\nimport { graphsReducer } from './graphs';\n\nexport { RootState };\n\nexport const rootReducer = combineReducers<RootState>({\n  graphs: graphsReducer\n});\n","import { Middleware } from 'redux';\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState, rootReducer } from 'app/reducers';\nimport { logger, thunk } from 'app/middleware';\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(thunk, logger);\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<RootState>;\n\n  if (module.hot) {\n    module.hot.accept('app/reducers', () => {\n      const nextReducer = require('app/reducers');\n      store.replaceReducer(nextReducer);\n    });\n  }\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { configureStore } from 'app/store';\nimport { Router } from 'react-router';\nimport { App } from './app';\nimport './assets/styles/index.scss';\n\n// prepare store\nconst history = createBrowserHistory();\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n","import { useMemo } from 'react';\nimport { Dispatch } from 'redux';\nimport {\n  GraphType,\n  IGraphData,\n  IGraphs,\n  SelectedRangeSides,\n} from 'app/models';\nimport { generateMockAverageResponseDelay } from 'app/mock-data-generators';\nimport dayjs from 'dayjs';\n\n\nexport namespace GraphsActions {\n  export enum Type {\n    FETCH_ALL_GRAPHS_REQUEST = 'FETCH_ALL_GRAPHS_REQUEST',\n    FETCH_ALL_GRAPHS_SUCCESS = 'FETCH_ALL_GRAPHS_SUCCESS',\n    FETCH_ALL_GRAPHS_FAILURE = 'FETCH_ALL_GRAPHS_FAILURE',\n\n    SET_SELECTED_GRAPH_RANGE = 'SET_SELECTED_GRAPH_RANGE',\n  }\n  const fetchAllGraphsRequest = () => {\n    return {\n      type: GraphsActions.Type.FETCH_ALL_GRAPHS_REQUEST,\n    }\n  }\n\n  const fetchAllGraphsSuccess = (graphs: IGraphs, selectedGraph: keyof IGraphs, selectedRange: {[key in SelectedRangeSides]: number}) => {\n    return {\n      type: GraphsActions.Type.FETCH_ALL_GRAPHS_SUCCESS,\n      payload: { graphs, selectedGraph, selectedRange },\n    }\n  }\n\n  const fetchAllGraphsFailure = (error: string) => {\n    return {\n      type: GraphsActions.Type.FETCH_ALL_GRAPHS_FAILURE,\n      payload: { error },\n    }\n  }\n\n  export const fetchAllGraphs = () => {\n    return async function(dispatch: Dispatch) {\n      dispatch(fetchAllGraphsRequest())\n      const fetchAverageResponseDelayData: Promise<IGraphData[]> = generateMockAverageResponseDelay();\n      fetchAverageResponseDelayData.then((values) => {\n        const rangeStart = dayjs().startOf('day').subtract(1, 'day').valueOf();\n        const rangeEnd = values[values.length -1].date;\n        // data only on 'lastQueueSizeData' (proto)\n        dispatch(fetchAllGraphsSuccess({\n          averageResponseDelayData: {\n            data: [{\n              date: 0,\n              type: 'default',\n              label: '',\n              value: 23,\n              unit: 'ms',\n            }],\n            type: GraphType.AVG_PAYLOAD_SIZE,\n          },\n          lastQueueSizeData: {\n            data: values,\n            type: GraphType.LAST_QUEUE_SIZE,\n          },\n          averagePayloadSize: {\n            data: [{\n              date: 0,\n              type: 'default',\n              label: '',\n              value: 1.35,\n              unit: 'kb',\n            }],\n            type: GraphType.AVG_PAYLOAD_SIZE,\n          },\n          deadLetterQueue: {\n            data: [{\n              date: 0,\n              type: 'default',\n              label: '',\n              value: 0,\n            }],\n            type: GraphType.AVG_PAYLOAD_SIZE,\n          }\n        },\n            'lastQueueSizeData', // in reality maybe here determine based on received data on what graph to select\n        {\n          [SelectedRangeSides.START]: rangeStart,\n          [SelectedRangeSides.END]: rangeEnd,\n        }\n        ))\n      }).catch(() => fetchAllGraphsFailure('error'))\n    }\n  }\n}\n\nexport type GraphsActions = Omit<typeof GraphsActions, 'Type'>;\n\nexport const useGraphsActions = (dispatch: Dispatch) => {\n  const { Type, ...actions } = GraphsActions;\n  return useMemo(() => actions, [dispatch]) as GraphsActions;\n};\n","import { GraphDataItemType, IGraphData } from 'app/models';\nimport dayjs from 'dayjs';\n\nconst delay = (t: number) => new Promise(resolve => setTimeout(resolve, t));\nconst randomIntFromInterval = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport const generateMockAverageResponseDelay = async () => {\n    const data: IGraphData[] = [];\n    const threeDaysAgo = dayjs().startOf('day').clone().subtract(3, 'day').valueOf();\n\n    for (let step = 0; step < 144; step++) {\n        const eventDate = threeDaysAgo + (step * 1800000);\n        data.push(\n            {\n                date: eventDate,\n                type: Math.random() < .03 ? 'config-change' : 'default' as GraphDataItemType,\n                label: dayjs(eventDate).format('HH:mm'),\n                value: randomIntFromInterval(0, 8300),\n            }\n        )\n    }\n    return delay(1000).then(() => {\n        return data;\n    });\n}\n"],"sourceRoot":""}